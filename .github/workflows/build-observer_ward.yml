# GitHub Actions 工作流名称
name: 自动编译并发布 observer_ward

# 工作流触发器配置
on:
  # 允许手动触发
  workflow_dispatch:
  # 定时任务：每天北京时间下午4点（UTC时间上午8点）执行一次
  schedule:
    - cron: '0 8 * * *'

# 环境变量，用于统一配置
env:
  # 上游observer_ward仓库
  UPSTREAM_REPO: 'emo-crab/observer_ward'
  # 需要的Rust版本
  RUST_VERSION: 'stable'

# 工作流包含的任务
jobs:
  # 第一个任务：检查更新
  check-for-updates:
    # 任务名称
    name: 1. 检查上游仓库是否有新版本
    # 运行环境
    runs-on: ubuntu-latest
    # 输出，用于在不同任务间传递数据
    outputs:
      # 是否需要运行编译任务
      should_run: ${{ steps.compare_tags.outputs.should_run }}
      # 获取到的上游新版本号
      new_tag: ${{ steps.get_upstream_tag.outputs.tag }}

    steps:
      # 步骤1：检出代码仓库
      - name: 检出代码仓库
        uses: actions/checkout@v4

      # 步骤2：获取上游observer_ward仓库的最新Git Tag
      - name: 获取上游最新 Git Tag
        id: get_upstream_tag
        run: |
          # 使用 GitHub API 获取最新的 release 标签，更可靠
          echo "正在获取最新 release..."
          LATEST_TAG=$(curl -s https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/releases/latest | jq -r '.tag_name')
          
          # 如果没有 release，则使用 GitHub API 获取最新标签
          if [ "$LATEST_TAG" == "null" ] || [ -z "$LATEST_TAG" ]; then
            echo "未找到 release，尝试获取最新标签..."
            LATEST_TAG=$(curl -s https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/tags | jq -r '.[0].name')
          fi
          
          # 清理标签名，确保没有特殊字符
          LATEST_TAG=$(echo "$LATEST_TAG" | sed 's/\^{}$//' | tr -d '\n\r')
          
          echo "上游最新 Git Tag: '$LATEST_TAG'"
          echo "标签长度: ${#LATEST_TAG}"
          
          # 验证标签名不为空且不包含特殊字符
          if [ -z "$LATEST_TAG" ] || [[ "$LATEST_TAG" == *"^{}"* ]]; then
            echo "错误：获取到的标签名无效: '$LATEST_TAG'"
            exit 1
          fi
          
          # 将tag设置为步骤的输出
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      # 步骤3：获取当前仓库的最新tag
      - name: 获取本仓库最新 Release Tag
        id: get_current_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 使用 || echo "0.0.0" 来处理首次运行，仓库还没有任何release的情况
          CURRENT_TAG=$(gh release list --limit 1 --json tagName -q '.[0].tagName' || echo "0.0.0")
          echo "本仓库最新 Tag: $CURRENT_TAG"
          echo "tag=$CURRENT_TAG" >> $GITHUB_OUTPUT

      # 步骤4：对比tag，判断是否需要继续执行
      - name: 对比 Tag 并设置输出
        id: compare_tags
        run: |
          # 从前面步骤获取输出
          UPSTREAM_TAG="${{ steps.get_upstream_tag.outputs.tag }}"
          CURRENT_TAG="${{ steps.get_current_tag.outputs.tag }}"
          
          # 如果两个tag不相等，说明有新版本
          if [[ "$UPSTREAM_TAG" != "$CURRENT_TAG" ]]; then
            echo "发现新版本: $UPSTREAM_TAG，准备开始编译。"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "当前版本 ($CURRENT_TAG) 已是最新，无需编译。"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  # 第二个任务：编译
  build:
    # 任务名称
    name: 2. 编译并压缩程序
    # 依赖于 check-for-updates 任务
    needs: check-for-updates
    # 仅当 check-for-updates 任务的输出 should_run 为 'true' 时才运行
    if: needs.check-for-updates.outputs.should_run == 'true'
    # 使用不同的运行环境进行编译
    runs-on: ${{ matrix.os }}
    
    # 编译矩阵策略
    strategy:
      # 当一个构建失败时，不取消其他构建
      fail-fast: false
      matrix:
        # 定义不同平台的组合
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: observer_ward
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: observer_ward
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: observer_ward.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            binary_name: observer_ward.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: observer_ward
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: observer_ward
    
    steps:
      # 步骤1：检出上游代码仓库
      - name: 检出上游代码仓库
        run: |
          # 手动 clone 和 checkout，避免 actions/checkout 的 refspec 问题
          git clone --depth 1 --branch ${{ needs.check-for-updates.outputs.new_tag }} https://github.com/${{ env.UPSTREAM_REPO }}.git .
          echo "成功检出代码，当前版本："
          git describe --tags || echo "无法获取版本信息"

      # 步骤2：安装Rust环境
      - name: 安装 Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}
          cache: true

      # 步骤3：安装交叉编译工具链（Linux环境编译ARM64）
      - name: 安装交叉编译工具链
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      # 步骤4：设置交叉编译环境变量
      - name: 设置交叉编译环境变量
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      # 步骤5：安装UPX压缩工具（仅限Linux和Windows x86_64）
      - name: 安装 UPX
        if: (matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu') || (matrix.os == 'windows-latest' && matrix.target == 'x86_64-pc-windows-msvc')
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update && sudo apt-get install -y upx-ucl
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install upx
          fi
        shell: bash

      # 步骤6：编译observer_ward
      - name: 编译 observer_ward
        id: build
        run: |
          # 定义输出文件名
          BINARY_NAME="observer_ward_${{ matrix.target }}"
          if [ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ] || [ "${{ matrix.target }}" == "aarch64-pc-windows-msvc" ]; then
            BINARY_NAME+=".exe"
          fi
          
          echo "开始编译: $BINARY_NAME (target=${{ matrix.target }})"
          # 编译命令，使用release模式
          cargo build --release --target ${{ matrix.target }}
          
          # 将编译好的文件复制到当前目录并重命名
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} $BINARY_NAME
          echo "编译完成."
          
          # 判断是否需要压缩（仅支持Linux x86_64和Windows x86_64）
          if [ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ] || [ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]; then
            echo "开始压缩..."
            upx -9 $BINARY_NAME
            echo "压缩完成."
          else
            echo "跳过压缩: ${{ matrix.target }} 不支持 UPX 或跳过压缩"
          fi

          # 将文件名设置为步骤输出，方便后续步骤引用
          echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
        shell: bash

      # 步骤7：上传编译好的文件作为构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          # 产物名称，唯一即可
          name: observer_ward-bin-${{ matrix.target }}
          # 需要上传的文件路径
          path: ${{ steps.build.outputs.binary_name }}
          # 产物保留天数
          retention-days: 1
  
  # 第三个任务：创建Release并上传文件
  release:
    # 任务名称
    name: 3. 创建 Release 并上传附件
    # 依赖于 build 任务
    needs: [check-for-updates, build]
    # 仅当需要更新时才运行
    if: needs.check-for-updates.outputs.should_run == 'true'
    # 运行环境
    runs-on: ubuntu-latest

    # 权限配置，需要写入release的权限
    permissions:
      contents: write

    steps:
      # 步骤1：检出代码仓库
      - name: 检出代码仓库
        uses: actions/checkout@v4

      # 步骤2：创建用于存放产物的目录
      - name: 创建下载目录
        run: mkdir -p artifacts

      # 步骤3：下载所有构建产物
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          # 下载到指定目录
          path: artifacts

      # 步骤4：创建GitHub Release并上传所有文件
      - name: 创建 Release 并上传
        env:
          # 使用 secrets.GITHUB_TOKEN 进行认证
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 切换到产物目录
          cd artifacts
          
          # 使用 GitHub CLI 创建 Release
          # ${{ needs.check-for-updates.outputs.new_tag }} 是新的版本号
          # --title 设置 Release 标题
          # --notes 设置 Release 的描述
          # `find . -type f -print` 会找到所有下载下来的文件并作为参数，一次性全部上传
          gh release create ${{ needs.check-for-updates.outputs.new_tag }} \
            --title "observer_ward ${{ needs.check-for-updates.outputs.new_tag }}" \
            --notes "由 GitHub Actions 自动编译发布。上游仓库: https://github.com/${{ env.UPSTREAM_REPO }}" \
            $(find . -type f -print)
